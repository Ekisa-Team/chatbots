datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider                    = "node node_modules/prisma-nestjs-graphql"
  output                      = "../src/@generated"
  noAtomicOperations          = false
  combineScalarFilters        = false
  reExport                    = None
  emitSingle                  = false
  emitCompiled                = false
  purgeOutput                 = false
  fields_Validator_from       = "class-validator"
  fields_Validator_input      = true
  fields_Scalars_from         = "graphql-scalars"
  fields_Scalars_input        = true
  useInputType_WhereInput_ALL = "WhereInput"
}

model App {
  id        Int      @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  chatbots Chatbot[]
  @@map("app")
}

model Chatbot {
  id               Int               @id @default(autoincrement())
  accessKey        String            @unique @map("access_key")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  channel          Channel?
  appId            Int               @map("app_id")
  app              App               @relation(fields: [appId], references: [id])
  templateMessages TemplateMessage[]

  @@map("chatbot")
}

model TemplateMessage {
  id        Int      @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  /// @Validator.MaxLength(300)
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  chatbotId Int      @map("chatbot_id")
  chatbot   Chatbot  @relation(fields: [chatbotId], references: [id])

  @@map("template_message")
}

model MessagingProvider {
  id       Int       @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  name     String    @unique
  channels Channel[]

  @@map("messaging_provider")
}

model Channel {
  id                  Int               @id @default(autoincrement())
  /// @Validator.IsNotEmpty()
  cellphone           String
  /// @Validator.IsNotEmpty()
  accountSid          String            @map("account_sid")
  /// @Validator.IsNotEmpty()
  authToken           String            @map("auth_token")
  /// @Validator.IsNotEmpty()
  httpVerb            String            @map("http_verb")
  /// @Validator.IsNotEmpty()
  /// @Validator.IsUrl()
  callbackUrl         String            @map("callback_url")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  messagingProviderId Int               @map("messaging_provider_id")
  messagingProvider   MessagingProvider @relation(fields: [messagingProviderId], references: [id])
  chatbotId           Int               @unique @map("chatbot_id")
  chatbot             Chatbot           @relation(fields: [chatbotId], references: [id])

  @@map("channel")
}
